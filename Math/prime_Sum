/*Fast Solution Using Optimized technique and HashMap



public class Solution {
    public ArrayList<Integer> primesum(int n) {
    Map<Integer,Integer> set = new HashMap<Integer,Integer>();
    boolean prime[] = new boolean[n+1]; 
        for(int i=0;i<n;i++) 
            prime[i] = true; 
          
        for(int p = 2; p*p <=n; p++) 
        { 
            // If prime[p] is not changed, then it is a prime 
            if(prime[p] == true) 
            { 
                // Update all multiples of p 
                for(int i = p*p; i <= n; i += p) 
                    prime[i] = false; 
            } 
        } 
          int k=0;
        // Print all prime numbers 
        for(int i = 2; i <= n; i++) 
        { 
            if(prime[i] == true){
            set.put(k,i);
            k++;
            }
        } 
        ArrayList<Integer> tmp = new ArrayList<Integer>();
        for(int i=0;i<k;i++){
          int l=n-set.get(i);
          if(set.containsValue(l)){
              tmp.add(set.get(k));
              tmp.add(l);
          }
        }
return tmp;
    }
}
